{"version":3,"sources":["components/WeatherCard/icon-low.svg","components/WeatherCard/icon-high.svg","components/Search/icon-search.svg","components/Author/icon-heart.svg","favicon.ico","services/stringToDate.js","services/weatherForecastApi.js","components/ErrorMessage/index.js","components/Header/index.js","types/index.js","services/dateToWeekday.js","components/WeatherCard/index.js","components/WeatherCardContainer/index.js","components/Search/index.js","services/splitList.js","components/CapitalLink/index.js","components/CapitalRow/index.js","components/CapitalTable/index.js","components/Author/index.js","components/Footer/index.js","containers/AppContainer/index.js","index.js"],"names":["module","exports","__webpack_require__","p","stringToDate","dateStr","parts","split","year","month","day","Date","weatherForecastApi","getMultipleForecastsById","idList","Array","isArray","Promise","resolve","reject","fetch","concat","join","then","response","json","result","parseInt","cnt","forecasts","list","map","item","city","name","country","sys","forecastList","date","high","main","temp_max","low","temp_min","currentTemperature","Number","temp","currentConditionText","weather","description","currentThermalSensation","windSpeed","wind","speed","humidity","catch","getForecastByCityName","cityName","days","arguments","length","undefined","location","current","forecast","forecastday","maxtemp_c","mintemp_c","temp_c","condition","text","feelslike_c","wind_kph","ErrorMessage","props","react_default","a","createElement","className","message","Header","shape","string","isRequired","arrayOf","instanceOf","number","weekdays","0","1","2","3","4","5","6","dateToWeekday","getDay","iconLow","require","iconHigh","WeatherCard","_ref","dataLoaded","Boolean","today","nextDays","slice","bundle","color","highlightColor","Link","to","title","bundle_default","width","src","height","alt","Math","round","key","data-order","WeatherCardContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","loadForecast","bind","assertThisInitialized","nextProps","nextState","sameCity","sameForecast","prevProps","prevState","_this2","setState","done","toString","src_components_ErrorMessage","src_components_WeatherCard","React","Component","Search","searchedTerm","handleChange","event","target","value","Route","render","history","onSubmit","preventDefault","push","search","handleSubmit","type","placeholder","pattern","required","autoFocus","defaultValue","onChange","splitList","firstChunk","secondChunk","CapitalLink","CapitalRow","src_components_CapitalLink","CapitalTable","order","border","components_CapitalRow","defaultProps","Author","href","Footer","_splitList","src_components_CapitalTable","src_components_Author","favicon","AppContainer","capitalsForecasts","capitalsError","loadCapitalsForecasts","handleRenderWeatherCardContainer","capitalIdList","capitals","capital","id","queryString","parse","window","document","scrollTo","components_WeatherCardContainer","BrowserRouter","react_favicon_default","url","src_components_Header","path","src_components_Search","src_components_Footer","ReactDOM","src_containers_AppContainer","getElementById"],"mappings":"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","file":"static/js/main.61727d7d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-low.4c0f8edd.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-high.2191c1b5.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-search.87a42f03.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-heart.f8c8fd29.svg\";","module.exports = __webpack_public_path__ + \"static/media/favicon.59368f90.ico\";","function stringToDate (dateStr) {\r\n    const parts = dateStr.split('-');\r\n    \r\n    const year = parts[0];\r\n    const month = parts[1] - 1; // JavaScript counts months from 0\r\n    const day = parts[2];\r\n\r\n    return new Date(year, month, day);\r\n}\r\n\r\nexport default stringToDate;\r\n","import stringToDate from './stringToDate';\r\n\r\n/*\r\n * As of January 2019, Yahoo Weather API is no longer available.\r\n * In order to keep the app working, the API had to be changed.\r\n * No other directly compatible API was found but it was possible to get\r\n * the same data using two other APIs:\r\n * - OpenWeatherMap (https://openweathermap.org/) for current weather of multiple cities, and\r\n * - APIXU (https://www.apixu.com/) for a single city with forecasts\r\n */\r\n\r\nfunction getMultipleForecastsById(idList) {\r\n    if (!Array.isArray(idList)) {\r\n        idList = [idList];\r\n    }\r\n\r\n    const API_URL = 'https://api.openweathermap.org/data/2.5/';\r\n    const API_KEY = '7291930c0cdcf0db0603d6580777ccda';\r\n    \r\n    return new Promise((resolve, reject) => {\r\n        fetch(`${API_URL}group?appid=${API_KEY}&units=metric&id=${idList.join(',')}`)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                if (!result || !parseInt(result.cnt)) {\r\n                    return resolve(null);\r\n                }\r\n\r\n                const forecasts = result.list.map(item => ({\r\n                    city: item.name,\r\n                    country: item.sys.country,\r\n                    forecastList: [{\r\n                        date: new Date(),\r\n                        high: item.main.temp_max,\r\n                        low: item.main.temp_min,\r\n                    }],\r\n                    currentTemperature: Number(item.main.temp),\r\n                    currentConditionText: item.weather[0].description,\r\n                    currentThermalSensation: 0,\r\n                    windSpeed: Number(item.wind.speed),\r\n                    humidity: Number(item.main.humidity),\r\n                }));\r\n\r\n                resolve(forecasts);\r\n            })\r\n            .then(resolve)\r\n            .catch(reject);\r\n    });\r\n}\r\n\r\nfunction getForecastByCityName(cityName, days = 6) {\r\n    const API_URL = `https://api.apixu.com/v1/forecast.json`;\r\n    const API_KEY = 'fe75c0c456d94398a0b120256191101';\r\n    \r\n    return new Promise((resolve, reject) => {\r\n        fetch(`${API_URL}?key=${API_KEY}&days=${days}&q=${cityName}`)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                if (!result || !result.location || !result.current) {\r\n                    return resolve(null);\r\n                }\r\n\r\n                const forecast = {\r\n                    city: result.location.name,\r\n                    country: result.location.country,\r\n                    forecastList: result.forecast.forecastday.map(item => ({\r\n                        date: stringToDate(item.date),\r\n                        high: item.day.maxtemp_c,\r\n                        low: item.day.mintemp_c,\r\n                    })),\r\n                    currentTemperature: result.current.temp_c,\r\n                    currentConditionText: result.current.condition.text,\r\n                    currentThermalSensation: result.current.feelslike_c,\r\n                    windSpeed: result.current.wind_kph,\r\n                    humidity: result.current.humidity,\r\n                };\r\n\r\n                resolve(forecast);\r\n            })\r\n            .catch(reject);\r\n    });\r\n}\r\n\r\nexport default { getMultipleForecastsById, getForecastByCityName };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './index.css';\r\n\r\nconst ErrorMessage = (props) => (\r\n    <div className=\"error-message\">{props.message}</div>\r\n);\r\n\r\nErrorMessage.propTypes = {\r\n    message: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import React from 'react';\r\n\r\nimport './index.css';\r\n\r\nconst Header = () => (\r\n    <header className=\"header\">\r\n        <h1 className=\"header__title\">Weather forecast</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;\r\n","import { string, number, shape, arrayOf, instanceOf } from 'prop-types';\r\n\r\nconst forecastDataType = shape({\r\n    city: string.isRequired,\r\n    country: string.isRequired,\r\n    forecastList: arrayOf(shape({\r\n        date: instanceOf(Date).isRequired,\r\n        high: number.isRequired,\r\n        low: number.isRequired,\r\n    })).isRequired,\r\n    currentTemperature: number.isRequired,\r\n    currentConditionText: string.isRequired,\r\n    currentThermalSensation: number.isRequired,\r\n    windSpeed: number.isRequired,\r\n    humidity: number.isRequired,\r\n});\r\n\r\nexport { forecastDataType };\r\n","const weekdays = {\r\n    0: 'Sunday',\r\n    1: 'Monday',\r\n    2: 'Tuesday',\r\n    3: 'Wednesday',\r\n    4: 'Thursday',\r\n    5: 'Friday',\r\n    6: 'Saturday',\r\n};\r\n\r\nfunction dateToWeekday (date) {\r\n    return weekdays[date.getDay()] || null;\r\n}\r\n\r\nexport default dateToWeekday;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { forecastDataType } from './../../types';\r\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\r\nimport dateToWeekday from './../../services/dateToWeekday';\r\n\r\nimport './index.css';\r\n\r\nconst iconLow = require('./icon-low.svg');\r\nconst iconHigh = require('./icon-high.svg');\r\n\r\nconst WeatherCard = ({ forecast }) => {\r\n    forecast = forecast || {};\r\n\r\n    const dataLoaded = Boolean(forecast.city);\r\n\r\n    const today = dataLoaded ? forecast.forecastList[0] : null;\r\n    const nextDays = dataLoaded ? forecast.forecastList.slice(1, 6) : null;\r\n\r\n    return (\r\n        <section className=\"weather-card\">\r\n            <SkeletonTheme color=\"#F1D5B2\" highlightColor=\"#FDB46D\">\r\n                <Link to=\"?\" className=\"weather-card__close\" title=\"Close\">x</Link>\r\n                <div className=\"weather-card__body\">\r\n                    <div className=\"weather-card__city app__skeleton\">\r\n                        {dataLoaded\r\n                            ? <span>{forecast.city} - {forecast.country}</span>\r\n                            : <Skeleton width={250}/>\r\n                        }\r\n                    </div>\r\n                    <h2 className=\"weather-card__temperature\">\r\n                        {dataLoaded ? `${forecast.currentTemperature}ºC` : <Skeleton/>}\r\n                        &nbsp;&nbsp;\r\n                        <span title={dataLoaded ? forecast.currentConditionText : ''}>\r\n                            {dataLoaded ? forecast.currentConditionText : <Skeleton/>}\r\n                        </span>\r\n                    </h2>\r\n                    <table className=\"weather-card__now\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <td className=\"weather-card__now__first-column\">\r\n                                    {dataLoaded ? <img src={iconLow} width=\"12\" height=\"12\" alt=\"Low\"/> : ''}\r\n                                    {dataLoaded ? <b>{Math.round(today.low)}º</b> : <Skeleton width={45}/>}\r\n                                    &nbsp;&nbsp;&nbsp;\r\n                                    {dataLoaded ? <img src={iconHigh} width=\"12\" height=\"12\" alt=\"High\"/> : ''}\r\n                                    {dataLoaded ? <b>{Math.round(today.high)}º</b> : <Skeleton width={45}/>}\r\n                                </td>\r\n                                <td>\r\n                                    {dataLoaded\r\n                                        ? <span>Sensation <b>{Math.round(forecast.currentThermalSensation)}ºC</b></span>\r\n                                        : <Skeleton width={140}/>\r\n                                    }\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    {dataLoaded\r\n                                        ? <span>Wind <b>{Math.round(forecast.windSpeed)}km/h</b></span>\r\n                                        : <Skeleton width={100}/>\r\n                                    }\r\n                                </td>\r\n                                <td>\r\n                                    {dataLoaded\r\n                                        ? <span>Humidity <b>{Math.round(forecast.humidity)}%</b></span>\r\n                                        : <Skeleton width={140}/>\r\n                                    }\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <table className=\"weather-card__footer\">\r\n                    <tbody>\r\n                        <tr>\r\n                            {dataLoaded\r\n                                ? (\r\n                                    nextDays.map((day, key) => (\r\n                                        <td className=\"weather-card__weekday\" key={key} data-order={key}>\r\n                                            <div>{dateToWeekday(day.date)}</div>\r\n                                            <div className=\"weather-card__weekdays__temp\">\r\n                                                {Math.round(day.low)}º&nbsp;&nbsp;{Math.round(day.high)}º\r\n                                            </div>\r\n                                        </td>\r\n                                    ))\r\n                                ) : (\r\n                                    <td><Skeleton height={42}/></td>\r\n                                )\r\n                            }\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </SkeletonTheme>\r\n        </section>\r\n    );\r\n}\r\n\r\nWeatherCard.propTypes = {\r\n    forecast: forecastDataType,\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport weatherForecastApi from './../../services/weatherForecastApi';\r\n\r\nimport ErrorMessage from './../../components/ErrorMessage';\r\nimport WeatherCard from './../WeatherCard';\r\n\r\nclass WeatherCardContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            forecast: null,\r\n            error: null,\r\n        };\r\n\r\n        this.loadForecast = this.loadForecast.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadForecast();\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        const sameCity = this.state.forecast && nextProps.city === this.state.forecast.city;\r\n        const sameForecast = nextState.forecast === this.state.forecast;\r\n        return sameCity && sameForecast ? false : true;\r\n    }\r\n    \r\n    componentDidUpdate(prevProps, prevState){\r\n        if (prevProps.city !== this.props.city) {\r\n            this.loadForecast();\r\n        }\r\n    }\r\n\r\n    loadForecast() {\r\n        this.setState({ forecast: null, error: null });\r\n        \r\n        const done = (forecast, error = null) => {\r\n            this.setState({ forecast, error });\r\n        };\r\n\r\n        weatherForecastApi.getForecastByCityName(this.props.city)\r\n            .then(forecast => {\r\n                forecast ? done(forecast) : done(null, 'City not found');\r\n            })\r\n            .catch(error => done(null, `Error: could not load weather card data.\\n(${error.toString()})`));\r\n    }\r\n    \r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage message={this.state.error}/>\r\n        }\r\n\r\n        return <WeatherCard forecast={this.state.forecast}/>\r\n    }\r\n}\r\n\r\nWeatherCardContainer.propTypes = {\r\n    city: PropTypes.string.isRequired\r\n};\r\n\r\nexport default WeatherCardContainer;\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport './index.css';\r\n\r\nconst Search = () => {\r\n    let searchedTerm = '';\r\n\r\n    function handleSubmit(event, history) {\r\n        event.preventDefault();\r\n\r\n        if (searchedTerm.length) {\r\n            history.push({\r\n                search: `?city=${searchedTerm}`\r\n            });\r\n        }\r\n    }\r\n\r\n    function handleChange(event) {\r\n        searchedTerm = event.target.value;\r\n    }\r\n\r\n    return (\r\n        <Route render={({ history }) => (\r\n            <section className=\"search-bar\">\r\n                <form className=\"search-bar__form\" onSubmit={(event) => handleSubmit(event, history)}>\r\n                    <input\r\n                        className=\"search-bar__input\"\r\n                        type=\"search\"\r\n                        placeholder=\"Search a city\"\r\n                        pattern=\".*\\S.*\"\r\n                        title=\"Must contain at least one non-empty character.\"\r\n                        required\r\n                        autoFocus\r\n                        defaultValue={searchedTerm}\r\n                        onChange={handleChange}/>\r\n                    <button className=\"search-bar__submit\" type=\"submit\" title=\"Search\">\r\n                        <img src={require('./icon-search.svg')} width=\"22\" height=\"22\" alt=\"Search\"/>\r\n                    </button>\r\n                </form>\r\n            </section>\r\n        )}/>\r\n    );\r\n};\r\n\r\nexport default Search;\r\n","function splitList(list) {\r\n    list = Array.isArray(list) ? list : [];\r\n    return {\r\n        firstChunk: list.slice(0, list.length/2),\r\n        secondChunk: list.slice(list.length/2),\r\n    };\r\n}\r\n\r\nexport default splitList;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './index.css';\r\n\r\nconst CapitalLink = ({ city }) => (\r\n    <Link className=\"capital__link\" to={`?city=${city}`}>{city}</Link>\r\n);\r\n\r\nCapitalLink.propTypes = {\r\n    city: PropTypes.string.isRequired\r\n};\r\n\r\nexport default CapitalLink;\r\n","import React from 'react';\r\nimport { forecastDataType } from './../../types';\r\n\r\nimport CapitalLink from './../CapitalLink';\r\n\r\nconst CapitalRow = ({ forecast }) => (\r\n    <tr>\r\n        <td className=\"capitals-column__temperature\">{Math.round(forecast.forecastList[0].low)}º</td>\r\n        <td className=\"capitals-column__temperature\">{Math.round(forecast.forecastList[0].high)}º</td>\r\n        <td><CapitalLink city={forecast.city}/></td>\r\n    </tr>\r\n);\r\n\r\nCapitalRow.propTypes = {\r\n    forecast: forecastDataType.isRequired,\r\n};\r\n\r\nexport default CapitalRow;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { forecastDataType } from './../../types';\r\n\r\nimport './index.css';\r\nimport CapitalRow from './../CapitalRow';\r\n\r\nconst CapitalTable = ({ order, forecasts }) => (\r\n    <div className=\"capitals__column-wrapper\" data-order={order}>\r\n        <table className=\"capitals__table\" border=\"0\">\r\n            <thead>\r\n                <tr>\r\n                    <th className=\"capitals-column__temperature\">Min</th>\r\n                    <th className=\"capitals-column__temperature\">Max</th>\r\n                    <th></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {forecasts.map((forecast, key) =>\r\n                    <CapitalRow key={key} forecast={forecast}/>\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n);\r\n\r\nCapitalTable.propTypes = {\r\n    forecasts: PropTypes.arrayOf(forecastDataType).isRequired,\r\n    order: PropTypes.number.isRequired,\r\n};\r\n\r\nCapitalTable.defaultProps = {\r\n    order: 1,\r\n}\r\n    \r\nexport default CapitalTable;\r\n","import React from 'react';\r\n\r\nimport './index.css';\r\n\r\nconst Author = () => (\r\n    <div className=\"author\">\r\n        Made\r\n        with\r\n        <img className=\"author-heart\" src={require('./icon-heart.svg')} alt=\"Heart\" width=\"16\" height=\"16\"/>\r\n        by <a className=\"author-link\" href=\"https://blog.andersonmamede.com.br/\">Anderson Mamede</a>\r\n    </div>\r\n);\r\n\r\nexport default Author;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport splitList from './../../services/splitList';\r\nimport { forecastDataType } from './../../types';\r\n\r\nimport './index.css';\r\nimport CapitalTable from './../CapitalTable';\r\nimport Author from './../Author';\r\n\r\nconst Footer = ({ forecasts }) => {\r\n    const { firstChunk, secondChunk } = splitList(forecasts);\r\n\r\n    return (\r\n        <footer className=\"footer\">\r\n            <h3 className=\"footer__title\">Capitals</h3>\r\n            <div className=\"foooter__capitals\">\r\n                <CapitalTable order={1} forecasts={firstChunk}/>\r\n                <CapitalTable order={2} forecasts={secondChunk}/>\r\n            </div>\r\n            <Author/>\r\n        </footer>\r\n    );\r\n};\r\n\r\nFooter.propTypes = {\r\n    forecasts: PropTypes.arrayOf(forecastDataType)\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport { Route, BrowserRouter } from 'react-router-dom';\r\nimport queryString from 'query-string';\r\nimport Favicon from 'react-favicon';\r\nimport PropTypes from 'prop-types';\r\nimport weatherForecastApi from './../../services/weatherForecastApi';\r\n\r\nimport './index.css';\r\nimport ErrorMessage from './../../components/ErrorMessage';\r\nimport Header from './../../components/Header';\r\nimport WeatherCardContainer from './../../components/WeatherCardContainer';\r\nimport Search from './../../components/Search';\r\nimport Footer from './../../components/Footer';\r\n\r\nconst favicon = require('./../../favicon.ico');\r\n\r\nclass AppContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            capitalsForecasts: null,\r\n            capitalsError: null,\r\n        };\r\n\r\n        this.loadCapitalsForecasts = this.loadCapitalsForecasts.bind(this);\r\n        this.handleRenderWeatherCardContainer = this.handleRenderWeatherCardContainer.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadCapitalsForecasts();\r\n    }\r\n\r\n    loadCapitalsForecasts() {\r\n        const done = (capitalsForecasts, capitalsError = null) => {\r\n            this.setState({ capitalsForecasts, capitalsError });\r\n        };\r\n\r\n        const capitalIdList = this.props.capitals.map(capital => capital.id);\r\n\r\n        weatherForecastApi.getMultipleForecastsById(capitalIdList)\r\n            .then(forecasts => {\r\n                forecasts ? done(forecasts) : done(null, 'Capitals forecasts not found');\r\n            })\r\n            .catch(error => done(null, `Error: could not load capitals.\\n(${error.toString()})`));\r\n    }\r\n\r\n    handleRenderWeatherCardContainer() {\r\n        const { city } = queryString.parse(window.location.search);\r\n\r\n        if (!city) {\r\n            return null;\r\n        }\r\n\r\n        document.title = `${city} - Weather forecast`;\r\n        window.scrollTo(0, 0);\r\n        return <WeatherCardContainer city={city}/>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <div className=\"app\">\r\n                    <Favicon url={favicon}/>\r\n                    <div className=\"app__wrapper\">\r\n                        <Header/>\r\n                        <div className=\"app__main\">\r\n                            <Route path='/' render={this.handleRenderWeatherCardContainer}/>\r\n                            <Search/>\r\n                        </div>\r\n                        {this.state.capitalsError &&  <ErrorMessage message={this.state.capitalsError}/>}\r\n                        {this.state.capitalsForecasts &&\r\n                            <Footer forecasts={this.state.capitalsForecasts}/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nAppContainer.propTypes = {\r\n    capitals: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n    })).isRequired\r\n};\r\n\r\nexport default AppContainer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport AppContainer from './containers/AppContainer';\r\n\r\n// List of city ID (city.list.json.gz) can be downloaded here http://bulk.openweathermap.org/sample/\r\nconst CAPITALS = [\r\n    { id: '3410315', name: 'Brasília' },\r\n    { id: '2759794', name: 'Amsterdam' },\r\n    { id: '2643743', name: 'London' },\r\n    { id: '2964574', name: 'Dublin' },\r\n    { id: '2950159', name: 'Berlin' },\r\n    { id: '1850147', name: 'Tokyo' },\r\n    { id: '2267057', name: 'Lisbon' },\r\n    { id: '6455259', name: 'Paris' },\r\n    { id: '2800866', name: 'Brussels' },\r\n    { id: '6359304', name: 'Madrid' },\r\n];\r\n\r\nReactDOM.render(\r\n    <AppContainer capitals={CAPITALS}/>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}